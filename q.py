from pyrogram import Client, filters
import config, keyboards
import mysql.connector
from mysql.connector import Error
from datetime import datetime
import re
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from io import BytesIO
from openpyxl import Workbook
from openpyxl.utils import get_column_letter


bot = Client(
    api_id=config.API_ID,
    api_hash=config.API_HASH,
    bot_token=config.BOT_TOKEN,
    name="restaurant_bot"
)

try:
    connection = mysql.connector.connect(
        host=config.DB_HOST,
        user=config.DB_USER,
        password=config.DB_PASSWORD,
        database=config.DB_NAME
    )
    if connection.is_connected():
        print("–£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
except Error as e:
    print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ –¥–æ MySQL", e)

user_states = {}


def button_filter(button):
    async def func(_, __, msg):
        return msg.text == button.text
    return filters.create(func, "ButtonFilter", button=button)


def state_filter(state):
    async def func(_, __, message):
        return user_states.get(message.from_user.id, {}).get('state') == state
    return filters.create(func, "StateFilter", state=state)


@bot.on_message(filters.command("start"))
async def start(bot, message):
    await message.reply('–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä–∏, —Ö—Ç–æ —Ç–∏.', reply_markup=keyboards.kb_main)


@bot.on_message(button_filter(keyboards.btn_admin))
async def admin(bot, message):
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM admins WHERE telegram_id = %s", (message.from_user.id,))
    user = cursor.fetchone()
    cursor.close()
    if user:
        await message.reply('–íi—Ç–∞—é', reply_markup=keyboards.kb_admin)
    else:
        await message.reply(f'–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä. –ù–∞–¥–∞–π—Ç–µ —Ü—ñ —Ü–∏—Ñ—Ä–∏ —ñ–Ω—à–æ–º—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {message.from_user.id}')


@bot.on_message(button_filter(keyboards.btn_restaurant))
async def restaurant(bot, message):
    user_id = message.from_user.id
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º
    cursor = connection.cursor()
    cursor.execute("SELECT id FROM restaurants WHERE telegram_id = %s", (user_id,))
    restaurants = cursor.fetchone()
    cursor.close()
    print(restaurants)
    if restaurants:
        await message.reply("–íi—Ç–∞—é", reply_markup=keyboards.kb_restaurant)
    else:
        await message.reply(f'–í–∏ –Ω–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω. –ù–∞–¥–∞–π—Ç–µ —Ü—ñ —Ü–∏—Ñ—Ä–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {message.from_user.id}')


@bot.on_message(button_filter(keyboards.btn_addAdmin))
async def addAdmin(bot, message):
    if message.from_user.id in config.ADMIN_IDS:
        await message.reply("–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ: id; username; —ñ–º'—è; –ø—Ä—ñ–∑–≤–∏—â–µ\n"
                            "–ü—Ä–∏–∫–ª–∞–¥: 630501685; @dzakrevsky; –î–∞–Ω–∏–ª–æ; –ó–∞–∫—Ä–µ–≤—Å—å–∫–∏–π")
        user_states[message.from_user.id] = {'state': 'awaiting_admin_data'}
    else:
        await message.reply(f'–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä. –ù–∞–¥–∞–π—Ç–µ —Ü—ñ —Ü–∏—Ñ—Ä–∏ —ñ–Ω—à–æ–º—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {message.from_user.id}')


@bot.on_message(button_filter(keyboards.btn_addRestaurant))
async def addRestaurant(bot, message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    cursor = connection.cursor()
    cursor.execute("SELECT 1 FROM admins WHERE telegram_id = %s", (message.from_user.id,))
    user = cursor.fetchone()
    cursor.close()
    if user:
        await message.reply(
            "–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: id; –Ω–∞–∑–≤–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É; –∞–¥—Ä–µ—Å–∞; —Ç–µ–ª–µ—Ñ–æ–Ω\n"
            "–ü—Ä–∏–∫–ª–∞–¥: 1; –†–µ—Å—Ç–æ—Ä–∞–Ω –ê; –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫ 1; +380123456789"
        )
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_states[message.from_user.id] = {'state': 'awaiting_restaurant_data'}
    else:
        await message.reply(
            f'–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä. –ù–∞–¥–∞–π—Ç–µ —Ü—ñ —Ü–∏—Ñ—Ä–∏ —ñ–Ω—à–æ–º—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {message.from_user.id}'
        )


@bot.on_message(button_filter(keyboards.btn_courier))
async def addCourier(bot, message):
    if message.from_user.id in config.ADMIN_IDS:
        await message.reply("–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∫—É—Ä'—î—Ä–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ: id; username; —ñ–º'—è; –ø—Ä—ñ–∑–≤–∏—â–µ\n"
                            "–ü—Ä–∏–∫–ª–∞–¥: 123456789; @courier_username; –Ü–º'—è; –ü—Ä—ñ–∑–≤–∏—â–µ")
        user_states[message.from_user.id] = {'state': 'awaiting_courier_data'}
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫—É—Ä'—î—Ä—ñ–≤.")


@bot.on_message(filters.private & state_filter('awaiting_admin_data'))
async def receive_admin_data(bot, message):
    user_id = message.from_user.id
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    text = message.text
    # –†–æ–∑–±–∏–≤–∞—î–º–æ –¥–∞–Ω—ñ –ø–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫—É ';'
    data = text.split(';')
    if len(data) != 4:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: id; username; —ñ–º'—è; –ø—Ä—ñ–∑–≤–∏—â–µ")
        return
    # –û—á–∏—â–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏
    data = [d.strip() for d in data]
    try:
        admin_id = int(data[0])
        username = data[1]
        first_name = data[2]
        last_name = data[3]
        # –í—Å—Ç–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        cursor = connection.cursor()
        sql = """
            INSERT INTO admins (telegram_id, username, first_name, last_name)
            VALUES (%s, %s, %s, %s)
            ON DUPLICATE KEY UPDATE
                username = VALUES(username),
                first_name = VALUES(first_name),
                last_name = VALUES(last_name);
        """
        cursor.execute(sql, (admin_id, username, first_name, last_name))
        connection.commit()
        cursor.close()
        await message.reply("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!", reply_markup=keyboards.kb_admin)
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        if admin_id not in config.ADMIN_IDS:
            config.ADMIN_IDS.append(admin_id)
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_states.pop(user_id, None)
    except ValueError:
        await message.reply("ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.", reply_markup=keyboards.kb_admin)
    except mysql.connector.Error as err:
        await message.reply(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {err}", reply_markup=keyboards.kb_admin)
    finally:
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞
        user_states.pop(user_id, None)


@bot.on_message(filters.private & button_filter(keyboards.btn_checkOrder))
async def check_active_orders(bot, message):
    user_id = message.from_user.id
    if user_id not in config.ADMIN_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.")
        return

    cursor = connection.cursor(dictionary=True)
    try:
        # –û–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑ –ø–æ–ª–µ–º courier_id
        cursor.execute("""
            SELECT o.id, o.client_name, o.phone_number, o.delivery_address, o.preparation_time, 
                   o.comment, o.is_paid, o.amount_due, o.courier_id, r.name AS restaurant_name
            FROM orders o
            JOIN restaurants r ON o.restaurant_id = r.id
            WHERE o.is_delivered = 0
            ORDER BY o.preparation_time DESC
        """)
        orders = cursor.fetchall()

        if not orders:
            await message.reply("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")
            return

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ–∂–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∑ inline-–∫–Ω–æ–ø–∫–∞–º–∏
        for order in orders:
            order_id = order['id']
            client_name = order['client_name']
            phone_number = order['phone_number']
            delivery_address = order['delivery_address']
            preparation_time = order['preparation_time'].strftime('%Y-%m-%d %H:%M')
            comment = order['comment']
            is_paid = order['is_paid']
            amount_due = order['amount_due']
            restaurant_name = order['restaurant_name']
            courier_id = order['courier_id']

            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            order_text = (
                f"üîπ **–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}**\n"
                f"üè¢ –†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_name}\n"
                f"üë§ –Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞: {client_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
                f"üìç –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"
                f"‚è∞ –ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è: {preparation_time}\n"
            )
            if comment:
                order_text += f"üìù –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}\n"
            order_text += (
                f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {'–¢–∞–∫' if is_paid else '–ù—ñ'}\n"
            )
            if not is_paid and amount_due:
                order_text += f"üíµ –°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {amount_due}\n"
            order_text += f"üìå –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏: **–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ**\n\n"

            # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            btn_edit = InlineKeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data=f"edit_order_{order_id}")
            btn_send = InlineKeyboardButton('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ —á–∞—Ç', callback_data=f"send_order_{order_id}")

            if courier_id is None:
                # –Ø–∫—â–æ –∫—É—Ä'—î—Ä –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π, –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫—É—Ä'—î—Ä—É"
                btn_send_worker = InlineKeyboardButton('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫—É—Ä\'—î—Ä—É', callback_data=f"send_worker_order_{order_id}")
                markup = InlineKeyboardMarkup([
                    [btn_edit],
                    [btn_send],
                    [btn_send_worker]
                ])
            else:
                # –Ø–∫—â–æ –∫—É—Ä'—î—Ä –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ –ª–∏—à–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
                # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–æ–¥–∞–º–æ –∫–Ω–æ–ø–∫—É "–í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è –≤—ñ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" –∞–±–æ "–ó–∞–±—Ä–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
                btn_take_order = InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"take_order_{order_id}")
                markup = InlineKeyboardMarkup([
                    [btn_take_order]
                ])

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await bot.send_message(
                chat_id=user_id,
                text=order_text,
                reply_markup=markup
            )
    except mysql.connector.Error as err:
        await message.reply(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å: {err}")
    finally:
        cursor.close()


@bot.on_callback_query(filters.regex(r'^take_order_(\d+)$'))
async def take_order_callback(bot, callback_query):
    user_id = callback_query.from_user.id
    match = re.match(r'^take_order_(\d+)$', callback_query.data)
    print(1)
    if match:
        order_id = int(match.group(1))
        cursor = connection.cursor(dictionary=True)
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            cursor.execute("""
                SELECT * FROM orders WHERE id = %s
            """, (order_id,))
            order = cursor.fetchone()

            if not order:
                await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                return

            if not order['courier_id']:
                await callback_query.answer("–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–µ –∫—É—Ä'—î—Ä—É.", show_alert=True)
                return

            # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –≤–∏–¥–∞–ª—è—é—á–∏ courier_id
            cursor.execute("""
                UPDATE orders
                SET courier_id = NULL
                WHERE id = %s
            """, (order_id,))
            connection.commit()

            await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ.", show_alert=True)

            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            order_text = (
                f"üîÑ **–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ –≤—ñ–¥ –∫—É—Ä'—î—Ä–∞**\n"
                f"üè¢ –†–µ—Å—Ç–æ—Ä–∞–Ω: {order['restaurant_id']}\n"
                f"üë§ –Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞: {order['client_name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone_number']}\n"
                f"üìç –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_address']}\n"
                f"‚è∞ –ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è: {order['preparation_time'].strftime('%Y-%m-%d %H:%M')}\n"
            )
            if order['comment']:
                order_text += f"üìù –ö–æ–º–µ–Ω—Ç–∞—Ä: {order['comment']}\n"
            order_text += (
                f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {'–¢–∞–∫' if order['is_paid'] else '–ù—ñ'}\n"
            )
            if not order['is_paid'] and order['amount_due']:
                order_text += f"üíµ –°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {order['amount_due']}\n"
            order_text += f"üìå –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏: **–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ**\n\n"

            # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            btn_edit = InlineKeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data=f"edit_order_{order_id}")
            btn_send = InlineKeyboardButton('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ —á–∞—Ç', callback_data=f"send_order_{order_id}")
            btn_send_worker = InlineKeyboardButton('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫—É—Ä\'—î—Ä—É', callback_data=f"send_worker_order_{order_id}")
            markup = InlineKeyboardMarkup([
                [btn_edit],
                [btn_send],
                [btn_send_worker]
            ])

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await bot.send_message(
                chat_id=user_id,
                text=order_text,
                reply_markup=markup
            )

        except mysql.connector.Error as err:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤ take_order_callback: {err}")
            await callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", show_alert=True)
        finally:
            cursor.close()
    else:
        await callback_query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)


@bot.on_message(filters.private & state_filter('awaiting_restaurant_data'))
async def receive_restaurant_data(bot, message):
    user_id = message.from_user.id
    text = message.text
    data = text.split(';')
    if len(data) != 4:
        await message.reply(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: id; –Ω–∞–∑–≤–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É; –∞–¥—Ä–µ—Å–∞; —Ç–µ–ª–µ—Ñ–æ–Ω"
        )
        return
    # –û—á–∏—â–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏
    data = [d.strip() for d in data]
    try:
        restaurant_id = int(data[0])
        name = data[1]
        address = data[2]
        phone = data[3]
        telegram_id = message.from_user.id  # –û—Ç—Ä–∏–º—É—î–º–æ telegram_id —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
        # –í—Å—Ç–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        cursor = connection.cursor()
        sql = """
            INSERT INTO restaurants (id, name, address, phone, telegram_id)
            VALUES (%s, %s, %s, %s, %s)
            ON DUPLICATE KEY UPDATE
                name = VALUES(name),
                address = VALUES(address),
                phone = VALUES(phone),
                telegram_id = VALUES(telegram_id);
        """
        cursor.execute(sql, (restaurant_id, name, address, phone, telegram_id))
        connection.commit()
        cursor.close()
        await message.reply("–†–µ—Å—Ç–æ—Ä–∞–Ω –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!", reply_markup=keyboards.kb_admin)
    except ValueError:
        await message.reply(
            "ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.",
            reply_markup=keyboards.kb_admin
        )
    except mysql.connector.Error as err:
        await message.reply(
            f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É: {err}",
            reply_markup=keyboards.kb_admin
        )
    finally:
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_states.pop(user_id, None)

@bot.on_message(filters.private & state_filter('awaiting_courier_data'))
async def receive_courier_data(bot, message):
    user_id = message.from_user.id
    text = message.text
    data = text.split(';')
    if len(data) != 4:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: id; username; —ñ–º'—è; –ø—Ä—ñ–∑–≤–∏—â–µ")
        return
    data = [d.strip() for d in data]
    try:
        courier_id = int(data[0])
        username = data[1]
        first_name = data[2]
        last_name = data[3]
        # –í—Å—Ç–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        cursor = connection.cursor()
        sql = """
            INSERT INTO couriers (telegram_id, username, first_name, last_name)
            VALUES (%s, %s, %s, %s)
            ON DUPLICATE KEY UPDATE
                username = VALUES(username),
                first_name = VALUES(first_name),
                last_name = VALUES(last_name);
        """
        cursor.execute(sql, (courier_id, username, first_name, last_name))
        connection.commit()
        cursor.close()
        await message.reply("–ö—É—Ä'—î—Ä–∞ –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!", reply_markup=keyboards.kb_admin)
    except ValueError:
        await message.reply("ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.")
    except mysql.connector.Error as err:
        await message.reply(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫—É—Ä'—î—Ä–∞: {err}")
    finally:
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_states.pop(user_id, None)

@bot.on_message(button_filter(keyboards.btn_showOrders))
async def show_orders(bot, message):
    user_id = message.from_user.id
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º
    cursor = connection.cursor()
    cursor.execute("SELECT id FROM restaurants WHERE telegram_id = %s", (user_id,))
    restaurant = cursor.fetchone()
    if restaurant:
        restaurant_id = restaurant[0]
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —è–∫—ñ –Ω–µ –≤—ñ–¥–∑–Ω–∞—á–µ–Ω—ñ —è–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∞–Ω—ñ
        cursor.execute("""
            SELECT id, client_name, phone_number, delivery_address, preparation_time, comment, is_paid, amount_due
            FROM orders
            WHERE restaurant_id = %s AND is_prepared = 0
        """, (restaurant_id,))
        orders = cursor.fetchall()
        if orders:
            for order in orders:
                order_id = order[0]
                client_name = order[1]
                phone_number = order[2]
                delivery_address = order[3]
                preparation_time = order[4].strftime('%Y-%m-%d %H:%M')
                comment = order[5]
                is_paid = order[6]
                amount_due = order[7]
                # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                order_text = f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}\n"
                order_text += f"–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞: {client_name}\n"
                order_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
                order_text += f"–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"
                order_text += f"–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è: {preparation_time}\n"
                if comment:
                    order_text += f"–ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}\n"
                order_text += f"–û–ø–ª–∞—á–µ–Ω–æ: {'–¢–∞–∫' if is_paid else '–ù—ñ'}\n"
                if not is_paid and amount_due:
                    order_text += f"–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {amount_due}\n"
                # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                btn_edit = InlineKeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data=f"edit_order_{order_id}")
                btn_send = InlineKeyboardButton('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ —á–∞—Ç', callback_data=f"send_order_{order_id}")
                btn_send_worker = InlineKeyboardButton('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫—É—Ä—î—Ä—É', callback_data=f"send_worker_order_{order_id}")
                markup = InlineKeyboardMarkup([
                    [btn_edit],
                    [btn_send],
                    [btn_send_worker]
                ])
                await bot.send_message(chat_id=user_id, text=order_text, reply_markup=markup)
        else:
            await message.reply("–ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å, —â–æ –æ—á—ñ–∫—É—é—Ç—å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è.")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.")
    cursor.close()

@bot.on_message(button_filter(keyboards.btn_view_courier_orders))
async def view_courier_orders(bot, message):
    user_id = message.from_user.id
    cursor = connection.cursor()
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫—É—Ä'—î—Ä–æ–º
        cursor.execute("SELECT id FROM couriers WHERE telegram_id = %s", (user_id,))
        courier = cursor.fetchone()
        if courier:
            courier_id = courier[0]
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —è–∫—ñ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ —Ü—å–æ–º—É –∫—É—Ä'—î—Ä—É —Ç–∞ —â–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ñ
            cursor.execute("""
                SELECT id, client_name, phone_number, delivery_address, preparation_time, comment, is_paid, amount_due
                FROM orders
                WHERE courier_id = %s AND (is_delivered = 0 OR is_delivered IS NULL)
            """, (courier_id,))
            orders = cursor.fetchall()
            if orders:
                for order in orders:
                    order_id = order[0]
                    client_name = order[1]
                    phone_number = order[2]
                    delivery_address = order[3]
                    preparation_time = order[4].strftime('%Y-%m-%d %H:%M')
                    comment = order[5]
                    is_paid = order[6]
                    amount_due = order[7]
                    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    order_text = f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}\n"
                    order_text += f"–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞: {client_name}\n"
                    order_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
                    order_text += f"–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"
                    order_text += f"–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è: {preparation_time}\n"
                    if comment:
                        order_text += f"–ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}\n"
                    order_text += f"–û–ø–ª–∞—á–µ–Ω–æ: {'–¢–∞–∫' if is_paid else '–ù—ñ'}\n"
                    if not is_paid and amount_due:
                        order_text += f"–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {amount_due}\n"
                    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ñ–¥–º—ñ—Ç–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ–≥–æ
                    markup = InlineKeyboardMarkup(
                        [[InlineKeyboardButton("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", callback_data=f"order_delivered_{order_id}")]]
                    )
                    await bot.send_message(chat_id=user_id, text=order_text, reply_markup=markup)
            else:
                await message.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        else:
            await message.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ view_courier_orders: {e}")
        await message.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å.")
    finally:
        cursor.close()

@bot.on_callback_query(filters.regex(r'^order_delivered_(\d+)$'))
async def order_delivered_callback(bot, callback_query):
    user_id = callback_query.from_user.id
    match = re.match(r'^order_delivered_(\d+)$', callback_query.data)
    if match:
        order_id = int(match.group(1))
        cursor = connection.cursor()
        try:
            courier_id = callback_query.from_user.id
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ü—å–æ–º—É –∫—É—Ä'—î—Ä—É
            cursor.execute("SELECT courier_id FROM orders WHERE id = %s", (order_id,))
            order = cursor.fetchone()
            if order:
                assigned_courier_id = order[0]
                if assigned_courier_id == courier_id:
                    # –í—ñ–¥–∑–Ω–∞—á–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–µ
                    cursor.execute("""
                        UPDATE orders
                        SET is_delivered = TRUE
                        WHERE id = %s
                    """, (order_id,))
                    connection.commit()
                    await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–∑–Ω–∞—á–µ–Ω–æ —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–µ.", show_alert=True)
                    # –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    await callback_query.message.edit_reply_markup(reply_markup=None)
                else:
                    await callback_query.answer("–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∞–º –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ.", show_alert=True)
            else:
                await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤ order_delivered_callback: {e}")
            await callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", show_alert=True)
        finally:
            cursor.close()
    else:
        await callback_query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)

@bot.on_callback_query(filters.regex(r'^accept_order_(\d+)$'))
async def accept_order_callback(bot, callback_query):
    user_id = callback_query.from_user.id
    match = re.match(r'^accept_order_(\d+)$', callback_query.data)
    if match:
        order_id = int(match.group(1))
        cursor = connection.cursor()
        try:
            courier_telegram_id = user_id
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—à–æ–º—É –∫—É—Ä'—î—Ä—É
            cursor.execute("SELECT courier_id FROM orders WHERE id = %s", (order_id,))
            order = cursor.fetchone()
            if order:
                existing_courier_id = order[0]
                if existing_courier_id is None:
                    # –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä'—î—Ä—É
                    # –°–ø–æ—á–∞—Ç–∫—É –∑–Ω–∞–π–¥–µ–º–æ courier_id —É —Ç–∞–±–ª–∏—Ü—ñ couriers –∑–∞ telegram_id
                    cursor.execute("SELECT id FROM couriers WHERE telegram_id = %s", (courier_telegram_id,))
                    courier = cursor.fetchone()
                    if courier:
                        courier_id_db = courier[0]
                        cursor.execute("""
                            UPDATE orders
                            SET courier_id = %s
                            WHERE id = %s
                        """, (courier_id_db, order_id))
                        connection.commit()

                        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫—É—Ä'—î—Ä—É
                        cursor.execute("""
                            SELECT client_name, phone_number, delivery_address, preparation_time, comment, is_paid, amount_due, restaurant_id
                            FROM orders
                            WHERE id = %s
                        """, (order_id,))
                        order_details = cursor.fetchone()
                        if order_details:
                            client_name, phone_number, delivery_address, preparation_time, comment, is_paid, amount_due, restaurant_id = order_details
                            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω
                            cursor.execute("SELECT name, address, phone FROM restaurants WHERE id = %s", (restaurant_id,))
                            restaurant_info = cursor.fetchone()
                            if restaurant_info:
                                restaurant_name, restaurant_address, restaurant_phone = restaurant_info
                            else:
                                restaurant_name = restaurant_address = restaurant_phone = "–ù–µ–≤—ñ–¥–æ–º–∞"

                            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫—É—Ä'—î—Ä–∞
                            order_message = f"""
–í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤—ñ–¥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É {restaurant_name}.

–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞: {client_name}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}
–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}
–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {preparation_time}
–ö–æ–º–µ–Ω—Ç–∞—Ä: {comment if comment else '–ù–µ–º–∞—î'}

–ß–∏ —Å–ø–ª–∞—á–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {'–¢–∞–∫' if is_paid else '–ù—ñ'}
–°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {amount_due if not is_paid else '–°–ø–ª–∞—á–µ–Ω–æ'}
                            """
                            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫—É—Ä'—î—Ä—É
                            await bot.send_message(chat_id=courier_telegram_id, text=order_message)

                            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤ —á–∞—Ç, —â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–µ
                            await callback_query.answer("–í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", show_alert=True)
                            await callback_query.message.edit_reply_markup(reply_markup=None)
                        else:
                            await callback_query.answer("–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                    else:
                        await callback_query.answer("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –∫—É—Ä'—î—Ä.", show_alert=True)
                else:
                    await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –ø—Ä–∏–π–Ω—è—Ç–µ —ñ–Ω—à–∏–º –∫—É—Ä'—î—Ä–æ–º.", show_alert=True)
            else:
                await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤ accept_order_callback: {e}")
            await callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏–π–Ω—è—Ç—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", show_alert=True)
        finally:
            cursor.close()
    else:
        await callback_query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)

@bot.on_callback_query(filters.regex(r'^send_order_(\d+)$'))
async def send_order_callback(bot, callback_query):
    user_id = callback_query.from_user.id
    match = re.match(r'^send_order_(\d+)$', callback_query.data)
    if match:
        order_id = int(match.group(1))
        cursor = connection.cursor()
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            cursor.execute("SELECT id FROM admins WHERE telegram_id = %s", (user_id,))
            admin = cursor.fetchone()
            if admin:
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                cursor.execute("""
                    SELECT o.client_name, o.phone_number, o.delivery_address, o.preparation_time, o.comment, o.is_paid, 
                           o.amount_due,
                           r.name AS restaurant_name, r.address AS restaurant_address, r.phone AS restaurant_phone 
                    FROM orders o
                    JOIN restaurants r ON o.restaurant_id = r.id
                    WHERE o.id = %s
                """, (order_id,))
                order = cursor.fetchone()
                if order:
                    (client_name, phone_number, delivery_address, preparation_time, comment, is_paid, amount_due,
                     restaurant_name, restaurant_address, restaurant_phone) = order
                    # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    order_message = f"""
–ù–æ–≤e –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É {restaurant_name}
–ê–¥—Ä–µ—Å–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É: {restaurant_address}
–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É: {restaurant_phone}

–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞: {client_name}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}
–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}
–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {preparation_time}
–ö–æ–º–µ–Ω—Ç–∞—Ä: {comment if comment else '–ù–µ–º–∞—î'}

–ß–∏ —Å–ø–ª–∞—á–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {'–¢–∞–∫' if is_paid else '–ù—ñ'}
–°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {amount_due if not is_paid else '–°–ø–ª–∞—á–µ–Ω–æ'}
                    """
                    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª
                    accept_button = InlineKeyboardButton('–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data=f"accept_order_{order_id}")
                    inline_kb = InlineKeyboardMarkup([[accept_button]])

                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Ç
                    chat_id = -4578652782  # –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID —á–∞—Ç—É (—Ü—ñ–ª–µ —á–∏—Å–ª–æ, –±–µ–∑ –ª–∞–ø–æ–∫)
                    await bot.send_message(chat_id, order_message, reply_markup=inline_kb)

                    await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç.", show_alert=True)
                else:
                    await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            else:
                await callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.", show_alert=True)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_order_callback: {e}")
            await callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ —á–∞—Ç.", show_alert=True)
        finally:
            cursor.close()
    else:
        await callback_query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)


@bot.on_callback_query(filters.regex(r'^order_prepared_(\d+)$'))
async def order_prepared_callback(bot, callback_query):
    user_id = callback_query.from_user.id
    match = re.match(r'^order_prepared_(\d+)$', callback_query.data)
    if match:
        order_id = int(match.group(1))
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º
        cursor = connection.cursor()
        cursor.execute("SELECT id FROM restaurants WHERE telegram_id = %s", (user_id,))
        restaurant = cursor.fetchone()
        if restaurant:
            restaurant_id = restaurant[0]
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ "–ø—Ä–∏–≥–æ—Ç–æ–≤–∞–Ω–µ"
            cursor.execute("""
                UPDATE orders
                SET is_prepared = TRUE
                WHERE id = %s AND restaurant_id = %s
            """, (order_id, restaurant_id))
            connection.commit()
            cursor.close()
            await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∞–Ω–µ.", show_alert=True)
            # –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await callback_query.message.edit_reply_markup(reply_markup=None)
        else:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.", show_alert=True)
    else:
        await callback_query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)


@bot.on_callback_query(filters.regex(r'^send_worker_order_(\d+)$'))
async def send_worker_order_callback(bot, callback_query):
    user_id = callback_query.from_user.id
    match = re.match(r'^send_worker_order_(\d+)$', callback_query.data)
    if match:
        order_id = int(match.group(1))
        cursor = connection.cursor()
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            cursor.execute("SELECT id FROM admins WHERE telegram_id = %s", (user_id,))
            admin = cursor.fetchone()
            if admin:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                cursor.execute("SELECT id FROM orders WHERE id = %s", (order_id,))
                order = cursor.fetchone()
                if order:
                    # –ó–∞–ø–∏—Ç—É—î–º–æ Telegram ID –∫—É—Ä'—î—Ä–∞
                    await bot.send_message(
                        chat_id=user_id,
                        text=f"–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫—É—Ä'—î—Ä–∞ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}:"
                    )
                    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–æ–¥—É Telegram ID –∫—É—Ä'—î—Ä–∞
                    if user_id not in user_states:
                        user_states[user_id] = {}
                    user_states[user_id]['state'] = 'awaiting_courier_id_assignment'
                    user_states[user_id]['order_id'] = order_id
                    await callback_query.answer("–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫—É—Ä'—î—Ä–∞.", show_alert=True)
                else:
                    await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            else:
                await callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.", show_alert=True)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_worker_order_callback: {e}")
            await callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.", show_alert=True)
        finally:
            cursor.close()
    else:
        await callback_query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)


@bot.on_message(filters.private & button_filter(keyboards.btn_archive))
async def check_archive_orders(bot, message):
    user_id = message.from_user.id
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("SELECT 1 FROM admins WHERE telegram_id = %s", (user_id,))
        admin = cursor.fetchone()
        if not admin:
            await message.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, is_delivered = 1)
        cursor.execute("""
                SELECT 
                    o.order_date, 
                    r.name AS restaurant_name, 
                    r.address AS restaurant_address,
                    o.cashless AS cashless, 
                    o.cash AS cash
                FROM orders o
                JOIN restaurants r ON o.restaurant_id = r.id
                WHERE o.is_delivered = 1
                ORDER BY o.order_date DESC
            """)
        orders = cursor.fetchall()

        if not orders:
            await message.reply("–ù–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ä–æ–±–æ—á–∏–π –ª–∏—Å—Ç Excel
        wb = Workbook()
        ws = wb.active
        ws.title = "–ê—Ä—Ö—ñ–≤ –ó–∞–º–æ–≤–ª–µ–Ω—å"

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤
        headers = ["–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "–ó–∞–∫–ª–∞–¥", "–ê–¥—Ä–µ—Å–∞", "–ë–µ–∑–≥–æ—Ç—ñ–≤–∫–∞", "–ì–æ—Ç—ñ–≤–∫–∞"]
        ws.append(headers)

        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å
        for order in orders:
            order_date = order['order_date'].strftime('%d/%m/%Y') if order['order_date'] else ""
            restaurant = order['restaurant_name'] if order['restaurant_name'] else ""
            address = order['restaurant_address'] if order['restaurant_address'] else ""
            cashless = order['cashless'] if order['cashless'] is not None else 0
            cash = order['cash'] if order['cash'] is not None else 0
            ws.append([order_date, restaurant, address, cashless, cash])

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–∏—Ä–∏–Ω–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤
        for column_cells in ws.columns:
            length = max(len(str(cell.value)) for cell in column_cells)
            column_letter = get_column_letter(column_cells[0].column)
            ws.column_dimensions[column_letter].width = length + 2  # –î–æ–¥–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –ø—Ä–æ—Å—Ç–æ—Ä—É

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ Excel —Ñ–∞–π–ª –≤ –ø–∞–º'—è—Ç—ñ
        excel_file = BytesIO()
        wb.save(excel_file)
        excel_file.seek(0)  # –ü–µ—Ä–µ–º—ñ—â–∞—î–º–æ –∫—É—Ä—Å–æ—Ä –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —Ñ–∞–π–ª—É

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª —É —á–∞—Ç
        await bot.send_document(
            chat_id=user_id,
            document=excel_file,
            file_name=f"archive_orders_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            caption="–ê—Ä—Ö—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å."
        )

    except mysql.connector.Error as err:
        await message.reply(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞—Ä—Ö—ñ–≤—É: {err}")
    except Exception as e:
        await message.reply(f"–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        cursor.close()


@bot.on_message(button_filter(keyboards.btn_newOrder))
async def createOrder(bot, message):
    if message.from_user.id in config.ADMIN_IDS:
        user_states[message.from_user.id] = {'state': 'awaiting_client_name', 'order_data': {}}
        await message.reply("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞:")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å.")


@bot.on_message(filters.private & state_filter('awaiting_client_name'))
async def get_client_name(bot, message):
    user_id = message.from_user.id
    user_states[user_id]['order_data']['client_name'] = message.text.strip()
    user_states[user_id]['state'] = 'awaiting_phone_number'
    await message.reply("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞:")


@bot.on_message(filters.private & state_filter('awaiting_phone_number'))
async def get_phone_number(bot, message):
    user_id = message.from_user.id
    user_states[user_id]['order_data']['phone_number'] = message.text.strip()
    user_states[user_id]['state'] = 'awaiting_delivery_address'
    await message.reply("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:")


@bot.on_message(filters.private & state_filter('awaiting_delivery_address'))
async def get_delivery_address(bot, message):
    user_id = message.from_user.id
    user_states[user_id]['order_data']['delivery_address'] = message.text.strip()
    user_states[user_id]['state'] = 'awaiting_preparation_time'
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD HH:MM):")


@bot.on_message(filters.private & state_filter('awaiting_preparation_time'))
async def get_preparation_time(bot, message):
    user_id = message.from_user.id
    try:
        prep_time = datetime.strptime(message.text.strip(), '%Y-%m-%d %H:%M')
        user_states[user_id]['order_data']['preparation_time'] = prep_time.strftime('%Y-%m-%d %H:%M:%S')
        user_states[user_id]['state'] = 'awaiting_comment'
        await message.reply("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ). –Ø–∫—â–æ –Ω–µ–º–∞—î, –≤–≤–µ–¥—ñ—Ç—å '–Ω–µ–º–∞—î':")
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD HH:MM")


@bot.on_message(filters.private & state_filter('awaiting_comment'))
async def get_comment(bot, message):
    user_id = message.from_user.id
    comment = message.text.strip()
    if comment.lower() == '–Ω–µ–º–∞—î':
        comment = ''
    user_states[user_id]['order_data']['comment'] = comment
    user_states[user_id]['state'] = 'awaiting_is_paid'
    await message.reply("–ß–∏ –æ–ø–ª–∞—á–µ–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è? –í–≤–µ–¥—ñ—Ç—å '—Ç–∞–∫' –∞–±–æ '–Ω—ñ':")


@bot.on_message(filters.private & state_filter('awaiting_is_paid'))
async def get_is_paid(bot, message):
    user_id = message.from_user.id
    response = message.text.strip().lower()
    if response == '—Ç–∞–∫':
        user_states[user_id]['order_data']['is_paid'] = True
        user_states[user_id]['order_data']['amount_due'] = None
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await save_order(bot, message)
    elif response == '–Ω—ñ':
        user_states[user_id]['order_data']['is_paid'] = False
        user_states[user_id]['state'] = 'awaiting_amount_due'
        await message.reply("–°–∫—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∑—è—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞?")
    else:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å '—Ç–∞–∫' –∞–±–æ '–Ω—ñ':")


@bot.on_message(filters.private & state_filter('awaiting_amount_due'))
async def get_amount_due(bot, message):
    user_id = message.from_user.id
    try:
        amount_due = float(message.text.strip().replace(',', '.'))
        user_states[user_id]['order_data']['amount_due'] = amount_due
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await save_order(bot, message)
    except ValueError:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—É–º–∏.")


async def save_order(bot, message):
    user_id = message.from_user.id
    order_data = user_states[user_id]['order_data']

    # Automatically assign restaurant_id as the user ID (who sent the message)
    restaurant_id = user_id

    try:
        cursor = connection.cursor()
        sql = """
            INSERT INTO orders (client_name, phone_number, delivery_address, preparation_time, comment, is_paid, 
            amount_due, restaurant_id, order_date)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
        """
        cursor.execute(sql, (
            order_data['client_name'],
            order_data['phone_number'],
            order_data['delivery_address'],
            order_data['preparation_time'],
            order_data['comment'],
            order_data['is_paid'],
            order_data['amount_due'],
            order_data['order_date'],
            restaurant_id  # Automatically assign restaurant_id as the user's ID
        ))
        connection.commit()
        cursor.close()
        await message.reply("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!", reply_markup=keyboards.kb_restaurant)
        await new_order_alarm(bot, message)
    except mysql.connector.Error as err:
        await message.reply(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {err}")
    finally:
        # Clear the user's state after the order is saved
        user_states.pop(user_id, None)


@bot.on_callback_query(filters.regex(r'^edit_order_(\d+)$'))
async def edit_order_callback(bot, callback_query):
    user_id = callback_query.from_user.id
    match = re.match(r'^edit_order_(\d+)$', callback_query.data)

    if match:
        order_id = int(match.group(1))
        cursor = connection.cursor()
        cursor.execute("SELECT id FROM admins WHERE telegram_id = %s", (user_id,))
        restaurant = cursor.fetchone()
        if restaurant:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
            cursor.execute(
                "SELECT client_name, phone_number, delivery_address, preparation_time, comment, is_paid, amount_due FROM orders WHERE id = %s",
                (order_id,))
            order = cursor.fetchone()

            if order:
                client_name, phone_number, delivery_address, preparation_time, comment, is_paid, amount_due = order

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                edit_msg = f"""
–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (ID: {order_id}):
–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞: {client_name}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}
–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}
–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è: {preparation_time}
–ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}
–ß–∏ —Å–ø–ª–∞—á–µ–Ω–æ: {'–¢–∞–∫' if is_paid else '–ù—ñ'}
–°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {amount_due if not is_paid else '–°–ø–ª–∞—á–µ–Ω–æ'}
                """
                await bot.send_message(user_id, edit_msg)
                await callback_query.answer("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –Ω–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
                                            "–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –±—É–¥—å-—è–∫–µ –∑ —Ü–∏—Ö –ø–æ–ª—ñ–≤, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –Ω–æ–≤—ñ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ:"
                                            "–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞: [–Ω–æ–≤–µ —ñ–º'—è]", show_alert=True)

                if user_id not in user_states:
                    user_states[user_id] = {}

                # –û–∂–∏–¥–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                user_states[user_id]['editing_order_id'] = order_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑
            else:
                await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        else:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.", show_alert=True)
    else:
        await callback_query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)


@bot.on_message(filters.private & state_filter('awaiting_courier_id_assignment'))
async def assign_order_to_courier(bot, message):
    user_id = message.from_user.id
    if user_id in user_states and user_states[user_id].get('state') == 'awaiting_courier_id_assignment':
        order_id = user_states[user_id].get('order_id')
        courier_telegram_id_input = message.text.strip()
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–≤–µ–¥–µ–Ω–∏–π ID —á–∏—Å–ª–æ–º
            courier_telegram_id = int(courier_telegram_id_input)
        except ValueError:
            await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π Telegram ID –∫—É—Ä'—î—Ä–∞.")
            return

        cursor = connection.cursor()
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º Telegram ID —ñ—Å–Ω—É—î
            # –ú–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é couriers, —Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ –º–æ–∂–µ –±–æ—Ç –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ü—å–æ–º—É ID
            # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            try:
                user = await bot.get_users(courier_telegram_id)
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {courier_telegram_id}: {e}")
                await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º Telegram ID.")
                return

            # –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä'—î—Ä—É, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ Telegram ID
            cursor.execute("""
                UPDATE orders
                SET courier_id = %s
                WHERE id = %s
            """, (courier_telegram_id, order_id))
            connection.commit()

            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            cursor.execute("""
                SELECT client_name, phone_number, delivery_address, preparation_time, comment, is_paid, amount_due, restaurant_id
                FROM orders
                WHERE id = %s
            """, (order_id,))
            order_details = cursor.fetchone()
            if order_details:
                client_name, phone_number, delivery_address, preparation_time, comment, is_paid, amount_due, restaurant_id = order_details
                # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω
                cursor.execute("SELECT name, address, phone FROM restaurants WHERE id = %s", (restaurant_id,))
                restaurant_info = cursor.fetchone()
                if restaurant_info:
                    restaurant_name, restaurant_address, restaurant_phone = restaurant_info
                else:
                    restaurant_name = restaurant_address = restaurant_phone = "–ù–µ–≤—ñ–¥–æ–º–∞"

                # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫—É—Ä'—î—Ä–∞
                order_message = f"""
–í–∏ –±—É–ª–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤—ñ–¥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É {restaurant_name}.
–ê–¥—Ä–µ—Å–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É: {restaurant_address}
–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É: {restaurant_phone}

–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞: {client_name}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}
–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}
–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {preparation_time}
–ö–æ–º–µ–Ω—Ç–∞—Ä: {comment if comment else '–ù–µ–º–∞—î'}

–ß–∏ —Å–ø–ª–∞—á–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {'–¢–∞–∫' if is_paid else '–ù—ñ'}
–°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {amount_due if not is_paid else '–°–ø–ª–∞—á–µ–Ω–æ'}
                """
                btn_picked_up = InlineKeyboardButton(
                    "–ó–∞–±—Ä–∞–≤ –∑–∞–∫–∞–∑",
                    callback_data=f"picked_up_order_{order_id}"
                )
                markup = InlineKeyboardMarkup([
                    [btn_picked_up]
                ])

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫—É—Ä'—î—Ä—É
                try:
                    await bot.send_message(chat_id=courier_telegram_id, text=order_message, reply_markup=markup)
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫—É—Ä'—î—Ä—É: {e}")
                    await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫—É—Ä'—î—Ä—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Telegram ID.")
                    return

                # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
                await message.reply(
                    f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∫—É—Ä'—î—Ä—É {user.first_name} {user.last_name}.")
            else:
                await message.reply("–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        except mysql.connector.Error as err:
            await message.reply(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –∫—É—Ä'—î—Ä–∞: {err}")
        finally:
            cursor.close()
            # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_states.pop(user_id, None)


@bot.on_callback_query(filters.regex(r'^picked_up_order_(\d+)$'))
async def picked_up_order_callback(bot, callback_query):
    user_id = callback_query.from_user.id
    match = re.match(r'^picked_up_order_(\d+)$', callback_query.data)
    if match:
        order_id = int(match.group(1))
        cursor = connection.cursor()
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            cursor.execute("""
                SELECT courier_id, is_picked_up, is_delivered
                FROM orders
                WHERE id = %s
            """, (order_id,))
            order = cursor.fetchone()
            if not order:
                await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                return

            courier_id_db, is_picked_up, is_delivered = order
            print(order_id)
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–µ —Ü—å–æ–º—É –∫—É—Ä'—î—Ä—É
            cursor.execute("SELECT courier_id FROM orders WHERE id = %s", (order_id,))
            courier = cursor.fetchone()
            print(courier)
            if not courier or courier[0] != user_id:
                await callback_query.answer("–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∞–º –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–µ.", show_alert=True)
                return

            if is_picked_up:
                await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –∑–∞–±—Ä–∞–Ω–µ.", show_alert=True)
                return

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            cursor.execute("""
                UPDATE orders
                SET is_picked_up = TRUE
                WHERE id = %s
            """, (order_id,))
            connection.commit()

            await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –∑–∞–±—Ä–∞–Ω–µ.", show_alert=True)
            btn_delivered = InlineKeyboardButton(
                "–î–æ—Å—Ç–∞–≤–∏–ª –∑–∞–∫–∞–∑",
                callback_data=f"delivered_order_{order_id}"
            )
            markup = InlineKeyboardMarkup([
                [btn_delivered]
            ])
            # –ú–æ–∂–ª–∏–≤–æ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ —á–∞—Ç—ñ
            # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫—É—Ä'—î—Ä–∞, –≤–∏–¥–∞–ª–∏–≤—à–∏ –∫–Ω–æ–ø–∫–∏
            await callback_query.message.edit_reply_markup(reply_markup=markup)
        except mysql.connector.Error as err:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤ picked_up_order_callback: {err}")
            await callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", show_alert=True)
        finally:
            cursor.close()
    else:
        await callback_query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)



@bot.on_callback_query(filters.regex(r'^delivered_order_(\d+)$'))
async def delivered_order_callback(bot, callback_query):
    user_id = callback_query.from_user.id
    match = re.match(r'^delivered_order_(\d+)$', callback_query.data)
    if match:
        order_id = int(match.group(1))
        cursor = connection.cursor()
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            cursor.execute("""
                SELECT courier_id, is_picked_up, is_delivered
                FROM orders
                WHERE id = %s
            """, (order_id,))
            order = cursor.fetchone()
            if not order:
                await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                return

            courier_id_db, is_picked_up, is_delivered = order

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–µ —Ü—å–æ–º—É –∫—É—Ä'—î—Ä—É
            cursor.execute("SELECT courier_id FROM orders WHERE id = %s", (order_id,))
            courier = cursor.fetchone()
            print(courier)
            if not courier or courier[0] != user_id:
                await callback_query.answer("–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∞–º –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–µ.", show_alert=True)
                return

            if not is_picked_up:
                await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —â–µ –Ω–µ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –∑–∞–±—Ä–∞–Ω–µ.", show_alert=True)
                return

            if is_delivered:
                await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–µ.", show_alert=True)
                return

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            cursor.execute("""
                UPDATE orders
                SET is_delivered = TRUE
                WHERE id = %s
            """, (order_id,))
            connection.commit()

            await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–µ.", show_alert=True)

            # –ú–æ–∂–ª–∏–≤–æ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ —á–∞—Ç—ñ
            # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫—É—Ä'—î—Ä–∞, –≤–∏–¥–∞–ª–∏–≤—à–∏ –∫–Ω–æ–ø–∫–∏
            await callback_query.message.edit_reply_markup(reply_markup=None)

            # (–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ —ñ–Ω—à–æ–º—É —á–∞—Ç—ñ
            # –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
            # admin_chat_id = -123456789  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —á–∞—Ç ID
            # await bot.send_message(admin_chat_id, f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –±—É–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
        except mysql.connector.Error as err:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤ delivered_order_callback: {err}")
            await callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", show_alert=True)
        finally:
            cursor.close()
    else:
        await callback_query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)


async def new_order_alarm(bot, message):
    user_id = message.from_user.id
    order_data = user_states[user_id]['order_data']

    # Automatically assign restaurant_id as the user ID (who sent the message)
    restaurant_id = user_id

    try:
        cursor = connection.cursor()

        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü—É orders –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
        cursor.execute("""
            INSERT INTO orders (restaurant_id, client_name, phone_number, delivery_address, preparation_time, comment, 
            is_paid, amount_due)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
        """, (
            restaurant_id,
            order_data['client_name'],
            order_data['phone_number'],
            order_data['delivery_address'],
            order_data['preparation_time'],
            order_data['comment'],
            order_data['is_paid'],
            order_data['amount_due']
        ))
        connection.commit()

        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        cursor.execute("SELECT LAST_INSERT_ID()")
        order_id = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
        sql_restaurant = "SELECT name, address, phone FROM restaurants WHERE id = %s"
        cursor.execute(sql_restaurant, (restaurant_id,))
        restaurant_info = cursor.fetchone()

        if not restaurant_info:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ!")
            return

        restaurant_name, restaurant_address, restaurant_phone = restaurant_info

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_message = f"""
–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É {restaurant_name}
–ê–¥—Ä–µ—Å–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É: {restaurant_address}
–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É: {restaurant_phone}

–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞: {order_data['client_name']}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {order_data['phone_number']}
–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_address']}
–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_data['preparation_time']}
–ö–æ–º–µ–Ω—Ç–∞—Ä: {order_data['comment']}

–ß–∏ —Å–ø–ª–∞—á–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {'–¢–∞–∫' if order_data['is_paid'] else '–ù—ñ'}
–°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {order_data['amount_due'] if not order_data['is_paid'] else '–°–ø–ª–∞—á–µ–Ω–æ'}
        """

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã admins
        cursor.execute("SELECT telegram_id FROM admins")
        admin_ids = [row[0] for row in cursor.fetchall()]

        btn_edit = InlineKeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data=f"edit_order_{order_id}")
        btn_send = InlineKeyboardButton('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ —á–∞—Ç', callback_data=f"send_order_{order_id}")
        btn_send_worker = InlineKeyboardButton('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫—É—Ä—î—Ä—É', callback_data=f"send_worker_order_{order_id}")
        kb_order_actions = InlineKeyboardMarkup([
            [btn_edit],
            [btn_send],
            [btn_send_worker]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in admin_ids:
            try:
                await bot.send_message(admin_id, admin_message, reply_markup=kb_order_actions)
                print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑ ID {admin_id}")
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

        cursor.close()

    except mysql.connector.Error as err:
        await message.reply(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {err}")
        return
    finally:
        # Clear the user's state after the order is saved
        user_states.pop(user_id, None)

bot.run()
